openapi: 3.0.3
info:
  title: doshro_bazar API
  version: 1.0.0
  description: Documentation of API endpoints of doshro_bazar
paths:
  /api/bookmarks/:
    post:
      operationId: bookmarks_create
      tags:
      - bookmarks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookmarkInputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BookmarkInputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookmarkInputRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkInput'
          description: ''
  /api/bookmarks/{id}/:
    delete:
      operationId: bookmarks_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this bookmark.
        required: true
      tags:
      - bookmarks
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/bookmarks/me/:
    get:
      operationId: bookmarks_me_retrieve
      tags:
      - bookmarks
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
          description: ''
  /api/bookmarks/profile/:
    get:
      operationId: bookmarks_profile_retrieve
      tags:
      - bookmarks
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkProfile'
          description: ''
  /api/category/:
    get:
      operationId: category_list
      description: Return a list of all the existing categories.
      tags:
      - category
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
  /api/comments/:
    get:
      operationId: comments_list
      parameters:
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__lt
        schema:
          type: string
          format: date-time
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: listing
        schema:
          type: string
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: order
        schema:
          type: array
          items:
            type: string
            enum:
            - -created_at
            - -updated_at
            - created_at
            - updated_at
        description: |-
          Ordering

          * `created_at` - Created at
          * `-created_at` - Created at (descending)
          * `updated_at` - Updated at
          * `-updated_at` - Updated at (descending)
        explode: false
        style: form
      - in: query
        name: updated_at
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - comments
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentsList'
          description: ''
    post:
      operationId: comments_create
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentsInputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentsInputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentsInputRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsInput'
          description: ''
  /api/comments/{id}/:
    get:
      operationId: comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - comments
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
          description: ''
    put:
      operationId: comments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentsInputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentsInputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentsInputRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsInput'
          description: ''
    patch:
      operationId: comments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCommentsInputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCommentsInputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCommentsInputRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsInput'
          description: ''
    delete:
      operationId: comments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Comment.
        required: true
      tags:
      - comments
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/dj-rest-auth/login/:
    post:
      operationId: dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /api/dj-rest-auth/logout/:
    post:
      operationId: dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - dj-rest-auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/otp:
    post:
      operationId: dj_rest_auth_otp_create
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPValidationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OTPValidationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OTPValidationRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OTPValidation'
          description: ''
  /api/dj-rest-auth/password/change/:
    post:
      operationId: dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/password/reset/:
    post:
      operationId: dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/password/reset/confirm/:
    post:
      operationId: dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/dj-rest-auth/register:
    post:
      operationId: dj_rest_auth_register_create
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRegister'
          description: ''
  /api/dj-rest-auth/user/:
    get:
      operationId: dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /api/image-listing/:
    post:
      operationId: image_listing_create
      tags:
      - image-listing
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingImageRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingImage'
          description: ''
  /api/listings/:
    get:
      operationId: listings_list
      description: Return a list of all the existing listings.
      parameters:
      - in: query
        name: category
        schema:
          type: integer
      - in: query
        name: category__parent
        schema:
          type: integer
      - in: query
        name: created_at
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: created_at__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: is_featured
        schema:
          type: boolean
      - in: query
        name: is_negotiable
        schema:
          type: boolean
      - in: query
        name: is_scraped
        schema:
          type: boolean
      - in: query
        name: is_sfw
        schema:
          type: boolean
      - in: query
        name: listing_condition
        schema:
          type: string
          enum:
          - BN
          - LN
          - NW
          - US
        description: |-
          * `NW` - New
          * `US` - Used
          * `LN` - Like New
          * `BN` - Brand New
      - in: query
        name: order
        schema:
          type: array
          items:
            type: string
            enum:
            - -created_at
            - -price
            - -updated_at
            - -views
            - created_at
            - price
            - updated_at
            - views
        description: |-
          Ordering

          * `created_at` - Created at
          * `-created_at` - Created at (descending)
          * `updated_at` - Updated at
          * `-updated_at` - Updated at (descending)
          * `price` - Price
          * `-price` - Price (descending)
          * `views` - Views
          * `-views` - Views (descending)
        explode: false
        style: form
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: price
        schema:
          type: number
      - in: query
        name: price__gt
        schema:
          type: number
      - in: query
        name: price__lt
        schema:
          type: number
      - in: query
        name: sale_status
        schema:
          type: string
          enum:
          - 'ON'
          - RD
          - SL
        description: |-
          * `SL` - Sold
          * `ON` - OPEN
          * `RD` - Removed
      - in: query
        name: status
        schema:
          type: string
          enum:
          - DF
          - DN
          - PB
        description: |-
          * `DF` - Draft
          * `PB` - Published
          * `DN` - Denied
      - in: query
        name: title__icontains
        schema:
          type: string
      - in: query
        name: updated_at
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__gt
        schema:
          type: string
          format: date-time
      - in: query
        name: updated_at__lt
        schema:
          type: string
          format: date-time
      - in: query
        name: user
        schema:
          type: integer
      - in: query
        name: user__username
        schema:
          type: string
      tags:
      - listings
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListingsList'
          description: ''
    post:
      operationId: listings_create
      tags:
      - listings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingsInputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListingsInputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingsInputRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingsInput'
          description: ''
  /api/listings/{slug}/:
    get:
      operationId: listings_retrieve
      description: Returns the given Listing.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this listings.
        required: true
      tags:
      - listings
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listings'
          description: ''
    put:
      operationId: listings_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this listings.
        required: true
      tags:
      - listings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingsInputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListingsInputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingsInputRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingsInput'
          description: ''
    patch:
      operationId: listings_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this listings.
        required: true
      tags:
      - listings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedListingsInputRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedListingsInputRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedListingsInputRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingsInput'
          description: ''
    delete:
      operationId: listings_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this listings.
        required: true
      tags:
      - listings
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/listings/me/:
    get:
      operationId: listings_me_retrieve
      tags:
      - listings
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listings'
          description: ''
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/users/{username}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/me/:
    get:
      operationId: users_me_retrieve
      tags:
      - users
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    Bookmark:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        listing:
          type: string
        user:
          type: integer
      required:
      - created_at
      - id
      - listing
      - updated_at
      - user
    BookmarkInput:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        listing:
          type: string
        user:
          type: integer
          readOnly: true
      required:
      - created_at
      - id
      - listing
      - updated_at
      - user
    BookmarkInputRequest:
      type: object
      properties:
        listing:
          type: string
      required:
      - listing
    BookmarkProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        listing:
          allOf:
          - $ref: '#/components/schemas/Listings'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
      required:
      - created_at
      - id
      - listing
      - updated_at
      - user
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        parent:
          type: integer
          nullable: true
        main_category_image:
          type: string
          nullable: true
          maxLength: 255
      required:
      - id
      - name
      - slug
    Comments:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        texts:
          type: string
        replies:
          type: object
          additionalProperties: {}
          nullable: true
        listing:
          type: string
        parent:
          type: integer
          nullable: true
        top_parent:
          type: integer
          nullable: true
      required:
      - created_at
      - id
      - listing
      - texts
      - updated_at
      - user
    CommentsInput:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        texts:
          type: string
        replies:
          type: object
          additionalProperties: {}
          readOnly: true
          nullable: true
        user:
          type: integer
          readOnly: true
        listing:
          type: string
        parent:
          type: integer
          nullable: true
        top_parent:
          type: integer
          nullable: true
      required:
      - created_at
      - id
      - listing
      - replies
      - texts
      - updated_at
      - user
    CommentsInputRequest:
      type: object
      properties:
        texts:
          type: string
          minLength: 1
        listing:
          type: string
        parent:
          type: integer
          nullable: true
        top_parent:
          type: integer
          nullable: true
      required:
      - listing
      - texts
    ListingConditionEnum:
      enum:
      - NW
      - US
      - LN
      - BN
      type: string
      description: |-
        * `NW` - New
        * `US` - Used
        * `LN` - Like New
        * `BN` - Brand New
    ListingImage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        listing:
          type: string
      required:
      - created_at
      - id
      - listing
      - updated_at
    ListingImageRequest:
      type: object
      properties:
        image:
          type: array
          items:
            type: string
            format: binary
          writeOnly: true
        listing:
          type: string
      required:
      - image
      - listing
    ListingViewImage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        image:
          type: string
          format: uri
        listing:
          type: string
      required:
      - created_at
      - id
      - image
      - listing
      - updated_at
    Listings:
      type: object
      properties:
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        images:
          type: array
          items:
            $ref: '#/components/schemas/ListingViewImage'
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        views:
          type: integer
          readOnly: true
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        listing_features:
          type: object
          additionalProperties: {}
          readOnly: true
        is_bookmarked:
          type: boolean
          readOnly: true
        number_of_bookmark:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          $ref: '#/components/schemas/StatusEnum'
        sale_status:
          $ref: '#/components/schemas/SaleStatusEnum'
        location:
          type: string
          nullable: true
          maxLength: 255
        phone_number:
          type: string
          nullable: true
          maxLength: 255
        is_scraped:
          type: boolean
          nullable: true
        is_featured:
          type: boolean
          nullable: true
        link_to_original:
          type: string
          nullable: true
          maxLength: 255
        banner_image:
          type: string
          nullable: true
          maxLength: 255
        is_negotiable:
          type: boolean
          nullable: true
        listing_condition:
          $ref: '#/components/schemas/ListingConditionEnum'
        is_sfw:
          type: boolean
          nullable: true
        scraped_username:
          type: string
          nullable: true
          maxLength: 255
        scraped_views:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
      required:
      - category
      - created_at
      - images
      - is_bookmarked
      - listing_features
      - number_of_bookmark
      - price
      - slug
      - title
      - updated_at
      - user
      - views
    ListingsInput:
      type: object
      properties:
        slug:
          type: string
          readOnly: true
          pattern: ^[-a-zA-Z0-9_]+$
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          readOnly: true
        sale_status:
          $ref: '#/components/schemas/SaleStatusEnum'
        location:
          type: string
          nullable: true
          maxLength: 255
        phone_number:
          type: string
          nullable: true
          maxLength: 255
        is_scraped:
          type: boolean
          readOnly: true
          nullable: true
        is_featured:
          type: boolean
          readOnly: true
          nullable: true
        link_to_original:
          type: string
          nullable: true
          maxLength: 255
        banner_image:
          type: string
          nullable: true
          maxLength: 255
        is_negotiable:
          type: boolean
          nullable: true
        listing_condition:
          $ref: '#/components/schemas/ListingConditionEnum'
        listing_features:
          type: object
          additionalProperties: {}
          nullable: true
        is_sfw:
          type: boolean
          nullable: true
        scraped_username:
          type: string
          readOnly: true
          nullable: true
        scraped_views:
          type: integer
          readOnly: true
          nullable: true
        category:
          type: integer
        user:
          type: integer
          readOnly: true
        views:
          type: integer
          readOnly: true
          nullable: true
      required:
      - category
      - created_at
      - is_featured
      - is_scraped
      - price
      - scraped_username
      - scraped_views
      - slug
      - status
      - title
      - updated_at
      - user
      - views
    ListingsInputRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sale_status:
          $ref: '#/components/schemas/SaleStatusEnum'
        location:
          type: string
          nullable: true
          maxLength: 255
        phone_number:
          type: string
          nullable: true
          maxLength: 255
        link_to_original:
          type: string
          nullable: true
          maxLength: 255
        banner_image:
          type: string
          nullable: true
          maxLength: 255
        is_negotiable:
          type: boolean
          nullable: true
        listing_condition:
          $ref: '#/components/schemas/ListingConditionEnum'
        listing_features:
          type: object
          additionalProperties: {}
          nullable: true
        is_sfw:
          type: boolean
          nullable: true
        category:
          type: integer
      required:
      - category
      - price
      - title
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
      required:
      - password
    OTPValidation:
      type: object
      properties:
        phone_number:
          type: string
          maxLength: 10
        otp:
          type: string
          maxLength: 6
      required:
      - otp
      - phone_number
    OTPValidationRequest:
      type: object
      properties:
        phone_number:
          type: string
          minLength: 1
          maxLength: 10
        otp:
          type: string
          minLength: 1
          maxLength: 6
      required:
      - otp
      - phone_number
    PaginatedCommentsList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Comments'
    PaginatedListingsList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Listings'
    PasswordChangeRequest:
      type: object
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordResetConfirmRequest:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedCommentsInputRequest:
      type: object
      properties:
        texts:
          type: string
          minLength: 1
        listing:
          type: string
        parent:
          type: integer
          nullable: true
        top_parent:
          type: integer
          nullable: true
    PatchedListingsInputRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sale_status:
          $ref: '#/components/schemas/SaleStatusEnum'
        location:
          type: string
          nullable: true
          maxLength: 255
        phone_number:
          type: string
          nullable: true
          maxLength: 255
        link_to_original:
          type: string
          nullable: true
          maxLength: 255
        banner_image:
          type: string
          nullable: true
          maxLength: 255
        is_negotiable:
          type: boolean
          nullable: true
        listing_condition:
          $ref: '#/components/schemas/ListingConditionEnum'
        listing_features:
          type: object
          additionalProperties: {}
          nullable: true
        is_sfw:
          type: boolean
          nullable: true
        category:
          type: integer
    PatchedUserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
    PatchedUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        name:
          type: string
          title: Name of User
          maxLength: 255
        image:
          type: string
          format: binary
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    SaleStatusEnum:
      enum:
      - SL
      - 'ON'
      - RD
      type: string
      description: |-
        * `SL` - Sold
        * `ON` - OPEN
        * `RD` - Removed
    StatusEnum:
      enum:
      - DF
      - PB
      - DN
      type: string
      description: |-
        * `DF` - Draft
        * `PB` - Published
        * `DN` - Denied
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        name:
          type: string
          title: Name of User
          maxLength: 255
        image:
          type: string
          format: uri
        number_of_listings:
          type: integer
          readOnly: true
        number_of_bookmark:
          type: integer
          readOnly: true
        number_of_comments:
          type: integer
          readOnly: true
      required:
      - number_of_bookmark
      - number_of_comments
      - number_of_listings
      - username
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
      required:
      - email
      - first_name
      - last_name
      - pk
      - username
    UserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - username
    UserRegister:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        name:
          type: string
          title: Name of User
          maxLength: 255
        image:
          type: string
          format: uri
      required:
      - username
    UserRegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        name:
          type: string
          title: Name of User
          maxLength: 255
        password:
          type: string
          writeOnly: true
          minLength: 1
          maxLength: 128
        image:
          type: string
          format: binary
      required:
      - password
      - username
    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        name:
          type: string
          title: Name of User
          maxLength: 255
        image:
          type: string
          format: binary
      required:
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
servers:
- url: https://doshrodeal.com
  description: Production server
