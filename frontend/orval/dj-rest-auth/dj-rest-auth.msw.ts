/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * doshro_bazar API
 * Documentation of API endpoints of doshro_bazar
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getDjRestAuthLoginCreateMock = () => ({
  key: faker.random.word(),
});

export const getDjRestAuthLogoutCreateMock = () => ({
  detail: faker.random.word(),
});

export const getDjRestAuthOtpCreateMock = () => ({
  phone_number: faker.random.word(),
  otp: faker.random.word(),
});

export const getDjRestAuthPasswordChangeCreateMock = () => ({
  detail: faker.random.word(),
});

export const getDjRestAuthPasswordResetCreateMock = () => ({
  detail: faker.random.word(),
});

export const getDjRestAuthPasswordResetConfirmCreateMock = () => ({
  detail: faker.random.word(),
});

export const getDjRestAuthRegisterCreateMock = () => ({
  username: faker.random.word(),
  name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  password: faker.random.word(),
  image: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.internet.url(), null]),
    undefined,
  ]),
});

export const getDjRestAuthUserRetrieveMock = () => ({
  pk: faker.datatype.number({ min: undefined, max: undefined }),
  username: faker.random.word(),
  email: faker.internet.email(),
  first_name: faker.random.word(),
  last_name: faker.random.word(),
});

export const getDjRestAuthUserUpdateMock = () => ({
  pk: faker.datatype.number({ min: undefined, max: undefined }),
  username: faker.random.word(),
  email: faker.internet.email(),
  first_name: faker.random.word(),
  last_name: faker.random.word(),
});

export const getDjRestAuthUserPartialUpdateMock = () => ({
  pk: faker.datatype.number({ min: undefined, max: undefined }),
  username: faker.random.word(),
  email: faker.internet.email(),
  first_name: faker.random.word(),
  last_name: faker.random.word(),
});

export const getDjRestAuthMSW = () => [
  rest.post('*/api/dj-rest-auth/login/', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDjRestAuthLoginCreateMock()),
    );
  }),
  rest.post('*/api/dj-rest-auth/logout/', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDjRestAuthLogoutCreateMock()),
    );
  }),
  rest.post('*/api/dj-rest-auth/otp', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDjRestAuthOtpCreateMock()),
    );
  }),
  rest.post('*/api/dj-rest-auth/password/change/', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDjRestAuthPasswordChangeCreateMock()),
    );
  }),
  rest.post('*/api/dj-rest-auth/password/reset/', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDjRestAuthPasswordResetCreateMock()),
    );
  }),
  rest.post('*/api/dj-rest-auth/password/reset/confirm/', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDjRestAuthPasswordResetConfirmCreateMock()),
    );
  }),
  rest.post('*/api/dj-rest-auth/register', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDjRestAuthRegisterCreateMock()),
    );
  }),
  rest.get('*/api/dj-rest-auth/user/', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDjRestAuthUserRetrieveMock()),
    );
  }),
  rest.put('*/api/dj-rest-auth/user/', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDjRestAuthUserUpdateMock()),
    );
  }),
  rest.patch('*/api/dj-rest-auth/user/', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getDjRestAuthUserPartialUpdateMock()),
    );
  }),
];
