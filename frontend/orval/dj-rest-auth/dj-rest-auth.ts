/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * doshro_bazar API
 * Documentation of API endpoints of doshro_bazar
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  Token,
  Login,
  RestAuthDetail,
  OTPValidation,
  PasswordChange,
  PasswordReset,
  PasswordResetConfirm,
  UserRegister,
  UserDetails,
  PatchedUserDetails,
} from '.././model';
import { customInstance } from '.././api/custom-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
  T,
>() => T extends Y ? 1 : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I,
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

/**
 * Check the credentials and return the REST Token
if the credentials are valid and authenticated.
Calls Django Auth login method to register User ID
in Django session framework

Accept the following POST parameters: username, password
Return the REST Framework Token Object's key.
 */
export const djRestAuthLoginCreate = (login: Login) => {
  return customInstance<Token>({
    url: `/api/dj-rest-auth/login/`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: login,
  });
};

export const getDjRestAuthLoginCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthLoginCreate>>,
    TError,
    { data: Login },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof djRestAuthLoginCreate>>,
  TError,
  { data: Login },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof djRestAuthLoginCreate>>,
    { data: Login }
  > = (props) => {
    const { data } = props ?? {};

    return djRestAuthLoginCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DjRestAuthLoginCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthLoginCreate>>
>;
export type DjRestAuthLoginCreateMutationBody = Login;
export type DjRestAuthLoginCreateMutationError = unknown;

export const useDjRestAuthLoginCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthLoginCreate>>,
    TError,
    { data: Login },
    TContext
  >;
}) => {
  const mutationOptions = getDjRestAuthLoginCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Calls Django logout method and delete the Token object
assigned to the current User object.

Accepts/Returns nothing.
 */
export const djRestAuthLogoutCreate = () => {
  return customInstance<RestAuthDetail>({
    url: `/api/dj-rest-auth/logout/`,
    method: 'post',
  });
};

export const getDjRestAuthLogoutCreateMutationOptions = <
  TError = unknown,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthLogoutCreate>>,
    TError,
    TVariables,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof djRestAuthLogoutCreate>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof djRestAuthLogoutCreate>>,
    TVariables
  > = () => {
    return djRestAuthLogoutCreate();
  };

  return { mutationFn, ...mutationOptions };
};

export type DjRestAuthLogoutCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthLogoutCreate>>
>;

export type DjRestAuthLogoutCreateMutationError = unknown;

export const useDjRestAuthLogoutCreate = <
  TError = unknown,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthLogoutCreate>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const mutationOptions = getDjRestAuthLogoutCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const djRestAuthOtpCreate = (oTPValidation: OTPValidation) => {
  return customInstance<OTPValidation>({
    url: `/api/dj-rest-auth/otp`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: oTPValidation,
  });
};

export const getDjRestAuthOtpCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthOtpCreate>>,
    TError,
    { data: OTPValidation },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof djRestAuthOtpCreate>>,
  TError,
  { data: OTPValidation },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof djRestAuthOtpCreate>>,
    { data: OTPValidation }
  > = (props) => {
    const { data } = props ?? {};

    return djRestAuthOtpCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DjRestAuthOtpCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthOtpCreate>>
>;
export type DjRestAuthOtpCreateMutationBody = OTPValidation;
export type DjRestAuthOtpCreateMutationError = unknown;

export const useDjRestAuthOtpCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthOtpCreate>>,
    TError,
    { data: OTPValidation },
    TContext
  >;
}) => {
  const mutationOptions = getDjRestAuthOtpCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Calls Django Auth SetPasswordForm save method.

Accepts the following POST parameters: new_password1, new_password2
Returns the success/fail message.
 */
export const djRestAuthPasswordChangeCreate = (
  passwordChange: PasswordChange,
) => {
  return customInstance<RestAuthDetail>({
    url: `/api/dj-rest-auth/password/change/`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: passwordChange,
  });
};

export const getDjRestAuthPasswordChangeCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthPasswordChangeCreate>>,
    TError,
    { data: PasswordChange },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof djRestAuthPasswordChangeCreate>>,
  TError,
  { data: PasswordChange },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof djRestAuthPasswordChangeCreate>>,
    { data: PasswordChange }
  > = (props) => {
    const { data } = props ?? {};

    return djRestAuthPasswordChangeCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DjRestAuthPasswordChangeCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthPasswordChangeCreate>>
>;
export type DjRestAuthPasswordChangeCreateMutationBody = PasswordChange;
export type DjRestAuthPasswordChangeCreateMutationError = unknown;

export const useDjRestAuthPasswordChangeCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthPasswordChangeCreate>>,
    TError,
    { data: PasswordChange },
    TContext
  >;
}) => {
  const mutationOptions =
    getDjRestAuthPasswordChangeCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Calls Django Auth PasswordResetForm save method.

Accepts the following POST parameters: email
Returns the success/fail message.
 */
export const djRestAuthPasswordResetCreate = (passwordReset: PasswordReset) => {
  return customInstance<RestAuthDetail>({
    url: `/api/dj-rest-auth/password/reset/`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: passwordReset,
  });
};

export const getDjRestAuthPasswordResetCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthPasswordResetCreate>>,
    TError,
    { data: PasswordReset },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof djRestAuthPasswordResetCreate>>,
  TError,
  { data: PasswordReset },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof djRestAuthPasswordResetCreate>>,
    { data: PasswordReset }
  > = (props) => {
    const { data } = props ?? {};

    return djRestAuthPasswordResetCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DjRestAuthPasswordResetCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthPasswordResetCreate>>
>;
export type DjRestAuthPasswordResetCreateMutationBody = PasswordReset;
export type DjRestAuthPasswordResetCreateMutationError = unknown;

export const useDjRestAuthPasswordResetCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthPasswordResetCreate>>,
    TError,
    { data: PasswordReset },
    TContext
  >;
}) => {
  const mutationOptions =
    getDjRestAuthPasswordResetCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Password reset e-mail link is confirmed, therefore
this resets the user's password.

Accepts the following POST parameters: token, uid,
    new_password1, new_password2
Returns the success/fail message.
 */
export const djRestAuthPasswordResetConfirmCreate = (
  passwordResetConfirm: PasswordResetConfirm,
) => {
  return customInstance<RestAuthDetail>({
    url: `/api/dj-rest-auth/password/reset/confirm/`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: passwordResetConfirm,
  });
};

export const getDjRestAuthPasswordResetConfirmCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthPasswordResetConfirmCreate>>,
    TError,
    { data: PasswordResetConfirm },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof djRestAuthPasswordResetConfirmCreate>>,
  TError,
  { data: PasswordResetConfirm },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof djRestAuthPasswordResetConfirmCreate>>,
    { data: PasswordResetConfirm }
  > = (props) => {
    const { data } = props ?? {};

    return djRestAuthPasswordResetConfirmCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DjRestAuthPasswordResetConfirmCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthPasswordResetConfirmCreate>>
>;
export type DjRestAuthPasswordResetConfirmCreateMutationBody =
  PasswordResetConfirm;
export type DjRestAuthPasswordResetConfirmCreateMutationError = unknown;

export const useDjRestAuthPasswordResetConfirmCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthPasswordResetConfirmCreate>>,
    TError,
    { data: PasswordResetConfirm },
    TContext
  >;
}) => {
  const mutationOptions =
    getDjRestAuthPasswordResetConfirmCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
export const djRestAuthRegisterCreate = (userRegister: UserRegister) => {
  return customInstance<UserRegister>({
    url: `/api/dj-rest-auth/register`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userRegister,
  });
};

export const getDjRestAuthRegisterCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthRegisterCreate>>,
    TError,
    { data: UserRegister },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof djRestAuthRegisterCreate>>,
  TError,
  { data: UserRegister },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof djRestAuthRegisterCreate>>,
    { data: UserRegister }
  > = (props) => {
    const { data } = props ?? {};

    return djRestAuthRegisterCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DjRestAuthRegisterCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthRegisterCreate>>
>;
export type DjRestAuthRegisterCreateMutationBody = UserRegister;
export type DjRestAuthRegisterCreateMutationError = unknown;

export const useDjRestAuthRegisterCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthRegisterCreate>>,
    TError,
    { data: UserRegister },
    TContext
  >;
}) => {
  const mutationOptions = getDjRestAuthRegisterCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Reads and updates UserModel fields
Accepts GET, PUT, PATCH methods.

Default accepted fields: username, first_name, last_name
Default display fields: pk, username, email, first_name, last_name
Read-only fields: pk, email

Returns UserModel fields.
 */
export const djRestAuthUserRetrieve = (signal?: AbortSignal) => {
  return customInstance<UserDetails>({
    url: `/api/dj-rest-auth/user/`,
    method: 'get',
    signal,
  });
};

export const getDjRestAuthUserRetrieveQueryKey = () =>
  [`/api/dj-rest-auth/user/`] as const;

export const getDjRestAuthUserRetrieveInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof djRestAuthUserRetrieve>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof djRestAuthUserRetrieve>>,
    TError,
    TData
  >;
}): UseInfiniteQueryOptions<
  Awaited<ReturnType<typeof djRestAuthUserRetrieve>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDjRestAuthUserRetrieveQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof djRestAuthUserRetrieve>>
  > = ({ signal }) => djRestAuthUserRetrieve(signal);

  return {
    queryKey,
    queryFn,
    staleTime: Infinity,
    refetchOnWindowFocus: false,
    retry: 2,
    ...queryOptions,
  };
};

export type DjRestAuthUserRetrieveInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthUserRetrieve>>
>;
export type DjRestAuthUserRetrieveInfiniteQueryError = unknown;

export const useDjRestAuthUserRetrieveInfinite = <
  TData = Awaited<ReturnType<typeof djRestAuthUserRetrieve>>,
  TError = unknown,
>(options?: {
  query?: UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof djRestAuthUserRetrieve>>,
    TError,
    TData
  >;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDjRestAuthUserRetrieveInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getDjRestAuthUserRetrieveQueryOptions = <
  TData = Awaited<ReturnType<typeof djRestAuthUserRetrieve>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof djRestAuthUserRetrieve>>,
    TError,
    TData
  >;
}): UseQueryOptions<
  Awaited<ReturnType<typeof djRestAuthUserRetrieve>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDjRestAuthUserRetrieveQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof djRestAuthUserRetrieve>>
  > = ({ signal }) => djRestAuthUserRetrieve(signal);

  return {
    queryKey,
    queryFn,
    staleTime: Infinity,
    refetchOnWindowFocus: false,
    retry: 2,
    ...queryOptions,
  };
};

export type DjRestAuthUserRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthUserRetrieve>>
>;
export type DjRestAuthUserRetrieveQueryError = unknown;

export const useDjRestAuthUserRetrieve = <
  TData = Awaited<ReturnType<typeof djRestAuthUserRetrieve>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof djRestAuthUserRetrieve>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDjRestAuthUserRetrieveQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Reads and updates UserModel fields
Accepts GET, PUT, PATCH methods.

Default accepted fields: username, first_name, last_name
Default display fields: pk, username, email, first_name, last_name
Read-only fields: pk, email

Returns UserModel fields.
 */
export const djRestAuthUserUpdate = (userDetails: NonReadonly<UserDetails>) => {
  return customInstance<UserDetails>({
    url: `/api/dj-rest-auth/user/`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: userDetails,
  });
};

export const getDjRestAuthUserUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthUserUpdate>>,
    TError,
    { data: NonReadonly<UserDetails> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof djRestAuthUserUpdate>>,
  TError,
  { data: NonReadonly<UserDetails> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof djRestAuthUserUpdate>>,
    { data: NonReadonly<UserDetails> }
  > = (props) => {
    const { data } = props ?? {};

    return djRestAuthUserUpdate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DjRestAuthUserUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthUserUpdate>>
>;
export type DjRestAuthUserUpdateMutationBody = NonReadonly<UserDetails>;
export type DjRestAuthUserUpdateMutationError = unknown;

export const useDjRestAuthUserUpdate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthUserUpdate>>,
    TError,
    { data: NonReadonly<UserDetails> },
    TContext
  >;
}) => {
  const mutationOptions = getDjRestAuthUserUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Reads and updates UserModel fields
Accepts GET, PUT, PATCH methods.

Default accepted fields: username, first_name, last_name
Default display fields: pk, username, email, first_name, last_name
Read-only fields: pk, email

Returns UserModel fields.
 */
export const djRestAuthUserPartialUpdate = (
  patchedUserDetails: NonReadonly<PatchedUserDetails>,
) => {
  return customInstance<UserDetails>({
    url: `/api/dj-rest-auth/user/`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: patchedUserDetails,
  });
};

export const getDjRestAuthUserPartialUpdateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthUserPartialUpdate>>,
    TError,
    { data: NonReadonly<PatchedUserDetails> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof djRestAuthUserPartialUpdate>>,
  TError,
  { data: NonReadonly<PatchedUserDetails> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof djRestAuthUserPartialUpdate>>,
    { data: NonReadonly<PatchedUserDetails> }
  > = (props) => {
    const { data } = props ?? {};

    return djRestAuthUserPartialUpdate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DjRestAuthUserPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof djRestAuthUserPartialUpdate>>
>;
export type DjRestAuthUserPartialUpdateMutationBody =
  NonReadonly<PatchedUserDetails>;
export type DjRestAuthUserPartialUpdateMutationError = unknown;

export const useDjRestAuthUserPartialUpdate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof djRestAuthUserPartialUpdate>>,
    TError,
    { data: NonReadonly<PatchedUserDetails> },
    TContext
  >;
}) => {
  const mutationOptions =
    getDjRestAuthUserPartialUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
